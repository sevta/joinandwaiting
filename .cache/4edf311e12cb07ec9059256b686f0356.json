{"id":"..\\..\\node_modules\\uuid\\lib\\rng.js","dependencies":[{"name":"C:\\Users\\AITINDO-PC\\Documents\\@tester\\joinandwaiting\\node_modules\\uuid\\package.json","includedInParent":true,"mtime":1538453553091},{"name":"C:\\Users\\AITINDO-PC\\Documents\\@tester\\joinandwaiting\\package.json","includedInParent":true,"mtime":1538478388318},{"name":"C:\\Users\\AITINDO-PC\\Documents\\@tester\\joinandwaiting\\.babelrc","includedInParent":true,"mtime":1538453520146},{"name":"crypto","loc":{"line":4,"column":21},"parent":"C:\\Users\\AITINDO-PC\\Documents\\@tester\\joinandwaiting\\node_modules\\uuid\\lib\\rng.js","resolved":"C:\\Users\\AITINDO-PC\\AppData\\Roaming\\npm\\node_modules\\parcel-bundler\\node_modules\\crypto-browserify\\index.js"}],"generated":{"js":"// Unique ID creation requires a high quality random # generator.  In node.js\n// this is pretty straight-forward - we use the crypto API.\n\nvar crypto = require('crypto');\n\nmodule.exports = function nodeRNG() {\n  return crypto.randomBytes(16);\n};\n","map":{"mappings":[{"source":"..\\..\\node_modules\\uuid\\lib\\rng.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"..\\..\\node_modules\\uuid\\lib\\rng.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"..\\..\\node_modules\\uuid\\lib\\rng.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"..\\..\\node_modules\\uuid\\lib\\rng.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"..\\..\\node_modules\\uuid\\lib\\rng.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"..\\..\\node_modules\\uuid\\lib\\rng.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"..\\..\\node_modules\\uuid\\lib\\rng.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"..\\..\\node_modules\\uuid\\lib\\rng.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"..\\..\\node_modules\\uuid\\lib\\rng.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}}],"sources":{"..\\..\\node_modules\\uuid\\lib\\rng.js":"// Unique ID creation requires a high quality random # generator.  In node.js\n// this is pretty straight-forward - we use the crypto API.\n\nvar crypto = require('crypto');\n\nmodule.exports = function nodeRNG() {\n  return crypto.randomBytes(16);\n};\n"},"lineCount":9}},"hash":"6f7adf865b31e8563117d605ee00225a","cacheData":{"env":{}}}